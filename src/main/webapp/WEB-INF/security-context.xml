<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <security:http auto-config="true">
        <!--here we tell Spring to give access this page (defined in 'pattern') only to authenticated user (defined in 'access')-->
        <security:intercept-url pattern="/artifacts/add" access="ROLE_MENTOR" />
        <!--here we define page that will be displayed after successful login ('/artifacts/add')-->
        <security:form-login login-page="/login"
                             default-target-url="/artifacts/add"
                             authentication-failure-url="/loginfailed"/>
        <!--here we define what page should be displayed after successful logout-->
        <security:logout logout-success-url="/logout" />
    </security:http>

    <!--here we list users and their roles-->
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="admin" authorities="ROLE_MENTOR" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>
        <!--to inform Spring about security context when application is started, configure 'contextConfigLocation' param in web.xml,-->
        <!--now Spring will create and manage all beans connected to security-->
